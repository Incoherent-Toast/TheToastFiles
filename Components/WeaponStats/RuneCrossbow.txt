var Damage = [2,3,5,6,8,9,11,12,14,15,17,22,28,34,40,46,52,58,64,70,76,81,87,93,99,105,111,117,123,129,135,140]
var Range = 22
var Crit_Chance = [8,10.5,13,15.5,18,20.5,23,25.5,28,30.5,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75]
var Crit_Mult   = [3,3.3,3.6,3.9,4.2,4.5,4.8,5.1,5.4,5.7,6,6.6,7.1,7.7,8.3,8.9,9.4,10,10.6,11.1,11.7,12.3,12.8,13.4,14,14.6,15.1,15.7,16.3,16.8,17.4,18]

var Splash = [9,13,17,21,25,29,33,37,41,46,50,54,58,62,66,70,74,78,82,87,91,95,99,103,107,111,115,119,123,128,132,136]
var Lifesteal = [9,11,12,14,15,17,18,20,21,23,24,26,27,29,30,32,33,35,36,38,39,41,42,44,45,47,48,50,51,53,54,56]
var Weaken = [-1,-1,-2,-2,-2,-3,-3,-3,-4,-4,-4,-5,-5,-5,-6,-6,-6,-7,-7,-7,-8,-8,-8,-9,-9,-9,-10,-10,-10,-11,-11,-11]
var Unmake = [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]
var Fire = [9,15,21,27,33,39,45,51,57,63,69,75,81,87,93,99,105,111,117,123,129,135,141,147,153,159,165,171,177,183,189,195]
var Chill = [2,2.4,2.8,3.2,3.6,4,4.4,4.8,5.2,5.6,6,6.6,7.2,7.8,8.4,9,9.6,10.2,10.8,11.4,12,12.6,13.2,13.8,14.4,15,15.6,16.2,16.8,17.4,18,18.6]

var Lesser_Elemental_Damage = [1,1,2,2,3,3,4,4,5,5,6,12,19,25,32,39,45,52,59,65,72,79,85,92,99,105,112,119,125,132,139,145]
var Pure_Elemental_Damage =   [5,6,8,9,11,12,14,15,17,18,20,26,33,40,47,54,60,67,74,81,88,94,101,108,115,122,128,135,142,149,156,162]

//Rare
var AS_Reduction = [0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,19,22,25,28,31,34,37]

var RareStats = [false,true,false,false,false,false,false]

var Base_AS = [16,6,5]

var WeaponArt = [ascii



#╤
asciiend,ascii
═}
asciiend]

func ReturnWeaponArt(Element)
  return WeaponArt[0]+Element+WeaponArt[1]




var EnchTypeList = ["0- Damage         ","1- Attack Speed   ","2- Dual Crit      ","3- Dual Crit      ","4- Splash Chance  ","5- Elemental Dmg  "]

func ReturnWeaponArt(Element)
  return WeaponArt[0]+Element+WeaponArt[1]

func Add(String)
  ?EnchTypeList.Count() = 7
    EnchTypeList[6] = String
  :
    EnchTypeList.Add(String)

func ReturnEnchTypeList(Affix)
  ?Affix = "F"
    Add("6- Fire Debuff     ")
  :?Affix = "I"
    Add("6- Chill Duration  ")
  :?Affix = "P"
    Add("6- Poison Debuff   ")
  :?Affix = "L"
    Add("6- Lifesteal Chance")
  :?Affix = "U"
    Add("6- Unmaking Chance ")
  :?EnchTypeList.Count()=7
    EnchTypeList.RemoveAt(6)
  return EnchTypeList

/*
D
dF
dI
dP
dU
dL

Enchantment numbers:
  0 = Dmg
  1 = AS
  2 = Dual Crit
  3 = Dual Crit
  4 = Splash
  5 = Elemental Dmg
  6 = Debuff
*/

func DisplayStats(Affix,ElePointer,Star,EnchantLevel,EnchTypePointer,f)
  var BasePointer = [Star,0,Star,Star,Star,Star,Star]

  ?EnchTypePointer = 2 | EnchTypePointer = 3
    BasePointer[2] += EnchantLevel
    BasePointer[3] += EnchantLevel
  :
    BasePointer[EnchTypePointer] += EnchantLevel

  var AS_List = f.GetAS(Base_AS, AS_Reduction[BasePointer[1]])
  var AS = AS_List[0] + AS_List[1] + AS_List[2]

  var BonusInfo = ""
  ?string.Equals(Affix,"D")
    var Elemental = Pure_Elemental_Damage[BasePointer[5]]
  :
    var Elemental = Lesser_Elemental_Damage[BasePointer[5]]
    ?Affix = "F"
      BonusInfo += "Burns for "+ Fire[BasePointer[6]] +" damage\n"
    :?Affix = "P"
      BonusInfo += "Weakens attacks by "+ Weaken[BasePointer[6]] +" damage\n"
    :?Affix = "I"
      BonusInfo += "Chills target for "+ Chill[BasePointer[6]] +"s\n"
    :?Affix = "U"
      BonusInfo += Unmake[BasePointer[6]] +"% chance to unmake target\n"
    :?Affix = "L"
      BonusInfo += Lifesteal[BasePointer[6]] +"% chance to heal 1 hp\nAverage Heal per second: " + f.HealOnStrike(AS, Lifesteal[BasePointer[6]] ) + "\n"

  ?ElePointer = 5
    Elemental = 0

  var Dps = f.CalcDPS(Damage[BasePointer[0]], Elemental, AS, Crit_Chance[BasePointer[2]], Crit_Mult[BasePointer[3]], 1)

  var DPS_String = string.Format("
^Damage: {0} + {1}\n
^Attack Frames: {2}\n
^{3}% chance to crit for {4}x damage\n
^{5}
^\nDPS: {6}",
^Damage[BasePointer[0]], Elemental, AS, Crit_Chance[BasePointer[2]], Crit_Mult[BasePointer[3]], BonusInfo , Dps)

  return DPS_String



/*
var EnchantModifiers = ["Damage","Attack Speed","Dual Crit","Dual Crit","Splash Chance","Elemental Dmg","Debuff on Hit"]

func GenerateText()
  var Details = CheckAffixes(Item,ID)
  var Ref = RuneBow.ReturnStats(Details[0],Details[1],Details[2],Details[3])
  var Dmg =             RuneBow.Damage[Ref[0]]
  var CritChance = RuneBow.Crit_Chance[Ref[2]]
  var CritMult =     RuneBow.Crit_Mult[Ref[3]]
  var Splash =          RuneBow.Splash[Ref[4]]
  var AS  =  GetAS( Ref[1], 0 , RuneBow , Berserk + Chill + Moon )
  var AS_Total = AS[0] + AS[1] + AS[2]
  var Elemental = RuneBow.Pure_Elemental_Damage[Ref[5]]
  var DebuffText = Ref[6]
  var WeaponArt = string.Join("",   [RuneBow.WeaponArt[0],ElementSymbol(Item),RuneBow.WeaponArt[1]]  )
  WeaponStats.text = WeaponArt + "\n" + DamageCalcText(Dmg,Elemental,CritChance,CritMult,AS) + "\n" + DebuffText
  GetChart(RuneBow)


func CheckRare(Stats,Star,Level,EnchantType)
  ?RareStats[EnchantType]
    Stats[EnchantType] = Level
    return Stats
  :
    Stats[EnchantType] = Star + Level
    return Stats

func ReturnStats(Affix,Star,Level,EnchantType)
  ?string.Equals(Affix,"D")
    var Stats = [Star, Star, Star, Star, Star, Star, false]
    return CheckRare(Stats,Star,Level,EnchantType)
  :?Affix = "dP"
    var Stats = [Star, Star, Star, Star, Star, Star, Star]
    Stats[6] = "Weakens foe's attacks by: " + Weaken[CheckRare(Stats,Star,Level,EnchantType)[6]] + " damage."
    return Stats
  :?Affix = "dL"
    var Stats = [Star, Star, Star, Star, Star, Star, Star]
    Stats[6] = Lifesteal[CheckRare(Stats,Star,Level,EnchantType)[6]] + "% Chance to gain 2 health."
    return Stats
  :?Affix = "dU"
    var Stats = [Star, Star, Star, Star, Star, Star, Star]
    Stats[6] = Unmake[CheckRare(Stats,Star,Level,EnchantType)[6]] + "% Chance to unmake on target."
    return Stats
  :?Affix = "dF"
    var Stats = [Star, Star, Star, Star, Star, Star, Star]
    Stats[6] = Fire[CheckRare(Stats,Star,Level,EnchantType)[6]] + " points of fire damage."
    return Stats
  :?Affix = "dI"
    var Stats = [Star, Star, Star, Star, Star, Star, Star]
    Stats[6] = Chill[CheckRare(Stats,Star,Level,EnchantType)[6]] + " seconds of chill debuff."
    return Stats
  :
    return "Unknown Affix??"
*/
