var Damage = [2,4,5,6,7,10,12,13,15,17,18,21,23,25,28,30,33,35,38,40,43,45,47,50,52,55,57,60,62,65,67,70]
var Crit_Chance = [8,8.5,9,9.5,10,10.5,11,11.5,12,12.5,13,14,14.5,15,15.5,16,16.5,17,17.5,18,19,19.5,20,20.5,21,21.5,22,22.5,23,23.5,24,25]
var Crit_Mult = [2,2.2,2.4,2.6,2.8,3,3.2,3.4,3.6,3.8,4,4.4,4.8,5.1,5.5,5.9,6.3,6.7,7,7.4,7.8,8.2,8.6,8.9,9.3,9.7,10.1,10.5,10.8,11.2,11.6,12]
var Range = 5
var Lifesteal = [16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73,76,79,82,85,88,91,94,97,100,103,106,109]
var Weaken = [-1,-1,-2,-2,-2,-3,-3,-3,-4,-4,-4,-5,-5,-5,-6,-6,-6,-7,-7,-7,-8,-8,-8,-9,-9,-9,-10,-10,-10,-11,-11,-11]
var Unmake = [3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65]
var Fire = [9,15,21,27,33,39,45,51,57,63,69,75,81,87,93,99,105,111,117,123,129,135,141,147,153,159,165,171,177,183,189,195]
var Chill = [2,2.4,2.8,3.2,3.6,4,4.4,4.8,5.2,5.6,6,6.6,7.2,7.8,8.4,9,9.6,10.2,10.8,11.4,12,12.6,13.2,13.8,14.4,15,15.6,16.2,16.8,17.4,18,18.6]
var Lesser_Elemental_Damage = [2,3,3,4,5,6,6,7,8,8,9,12,15,18,21,24,26,29,32,35,38,41,44,47,50,53,55,58,61,64,67,70]
var Pure_Elemental_Damage = [7,9,11,12,14,16,18,19,21,23,24,27,30,33,36,39,42,45,48,50,53,56,59,62,65,68,71,74,77,79,82,85]

//Rare Stat
var HP_Bonus = [0,5,12,19,26,33,40,47,54,61,68,75,82,89,96,103,110,117,124,131,138,145,145,145,145,145,145,145,145,145,145,145]

var AS_Reduction = [0,0,1,2,3,4,5,6,6,7,8,9,10,11,12,12,13,14,15,16,17,18,18,19,20,21,22,23,24,24,25,26]
var Base_AS = [12,5,5]

var WeaponArt = [ascii



#┼
asciiend,ascii
——
asciiend]

var EnchTypeList = ["0- Damage         ","1- Bonus Health   ","2- Attack Speed   ","3- Dual Crit      ","4- Dual Crit      ","5- Elemental Dmg  "]
func ReturnWeaponArt(Element)
  return WeaponArt[0]+Element+WeaponArt[1]

func Add(String)
  ?EnchTypeList.Count() = 7
    EnchTypeList[6] = String
  :
    EnchTypeList.Add(String)

func ReturnEnchTypeList(Affix)
  ?Affix = "F"
    Add("6- Fire Debuff     ")
  :?Affix = "I"
    Add("6- Chill Duration  ")
  :?Affix = "P"
    Add("6- Poison Debuff   ")
  :?Affix = "L"
    Add("6- Lifesteal Chance")
  :?Affix = "U"
    Add("6- Unmaking Chance ")
  :?EnchTypeList.Count()=7
    EnchTypeList.RemoveAt(6)
  return EnchTypeList


/*
Enchantment numbers:
  0 = Dmg
  1 = HP
  2 = AS
  3 = Dual Crit
  4 = Dual Crit
  5 = Elemental dmg
  6 = Debuffs
*/

func HealAverage(AS,HealChance)
  ?HealChance > 100
    var Chance1 = (200 - HealChance) / 100.0
    var Chance2 = (HealChance - 100) / 100.0
    return math.Round(3000.0/AS * (Chance1 * 1 + Chance2 * 2))/100
  :
    return math.Round(30.0/AS * 1 * HealChance)/100

func DisplayStats(Affix,ElePointer,Star,EnchantLevel,EnchTypePointer,f)
  var BasePointer = [Star,0,Star,Star,Star,Star,Star]

  ?EnchTypePointer = 3 | EnchTypePointer = 4
    BasePointer[3] += EnchantLevel
    BasePointer[4] += EnchantLevel
  :
    BasePointer[EnchTypePointer] += EnchantLevel

  var AS_List = f.GetAS(Base_AS, AS_Reduction[BasePointer[2]])
  var AS = AS_List[0] + AS_List[1] + AS_List[2]

  var BonusInfo = ""
  ?string.Equals(Affix,"D")
    var Elemental = Pure_Elemental_Damage[BasePointer[5]]
  :
    var Elemental = Lesser_Elemental_Damage[BasePointer[5]]
    ?Affix = "F"
      BonusInfo += "Burns for "+ Fire[BasePointer[6]] +" damage\n"
    :?Affix = "P"
      BonusInfo += "Weakens attacks by "+ Weaken[BasePointer[6]] +" damage\n"
    :?Affix = "I"
      BonusInfo += "Chills target for "+ Chill[BasePointer[6]] +"s\n"
    :?Affix = "U"
      BonusInfo += Unmake[BasePointer[6]] +"% chance to unmake target\n"
    :?Affix = "L"
      BonusInfo += Lifesteal[BasePointer[6]] +"% chance to heal 1 hp\nAverage Heal per second: " + f.HealOnStrike(AS, Lifesteal[BasePointer[6]] ) + "\n"

  ?ElePointer = 5
    Elemental = 0

  var Dps = f.CalcDPS(Damage[BasePointer[0]], Elemental, AS, Crit_Chance[BasePointer[3]], Crit_Mult[BasePointer[4]], 1)

  var DPS_String = string.Format("
^Damage: {0} + {1}\n
^Attack Frames: {2}\n
^{3}% chance to crit for {4}x damage\n
^{5}
^\nDPS: {6}",
^Damage[BasePointer[0]], Elemental, AS, Crit_Chance[BasePointer[3]], Crit_Mult[BasePointer[4]], BonusInfo , Dps)

  return DPS_String









