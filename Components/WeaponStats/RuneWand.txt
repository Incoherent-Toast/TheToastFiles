var Damage = [2,3,4,6,8,10,12,14,16,18,20,23,26,29,31,34,37,40,43,46,49,51,54,57,60,63,66,68,71,74,77,80]
var Lesser_Elemental_Damage = [1,1,2,2,3,3,4,4,5,5,6,9,13,16,20,23,27,30,34,37,41,45,48,52,55,59,62,66,69,73,77,80]
var Pure_Elemental_Damage = [5,6,8,9,11,12,14,15,17,18,20,23,27,31,35,39,43,46,50,54,58,62,66,70,73,77,81,85,89,93,97,100]
var Chill = [2,2.4,2.8,3.2,3.6,4,4.4,4.8,5.2,5.6,6,6.6,7.2,7.8,8.4,9,9.6,10.2,10.8,11.4,12,12.6,13.2,13.8,14.4,15,15.6,16.2,16.8,17.4,18,18.6]
var Range = 20
var Splash = [18,26,34,42,51,59,67,75,83,92,100,108,116,124,133,141,149,157,165,174,182,190,198,206,215,223,231,239,247,256,264,272]
var Lifesteal = [9,11,12,14,15,17,18,20,21,23,24,26,27,29,30,32,33,35,36,38,39,41,42,44,45,47,48,50,51,53,54,56]
var Weaken = [-1,-1,-2,-2,-2,-3,-3,-3,-4,-4,-4,-5,-5,-5,-6,-6,-6,-7,-7,-7,-8,-8,-8,-9,-9,-9,-10,-10,-10,-11,-11,-11]
var Unmake = [3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34]
var Fire = [9,15,21,27,33,39,45,51,57,63,69,75,81,87,93,99,105,111,117,123,129,135,141,147,153,159,165,171,177,183,189,195]

//(Rare)
var HP_Bonus = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21]

var AS_Reduction = [0,1,2,3,4,5,6,7,8,9,9,10,11,12,13,14,15,16,17,18,18,19,20,21,22,23,24,25,26,27,28,29]
var Base_AS = [14,8,8]

var WeaponArt = [ascii


###
asciiend,ascii

##/
asciiend]

func ReturnWeaponArt(Element)
  return WeaponArt[0]+Element+WeaponArt[1]


var EnchTypeList = ["0- Damage         ","1- Bonus Health   ","2- Attack Speed   ","3- Splash Chance  ","4- Elemental Dmg  "]
func ReturnWeaponArt(Element)
  return WeaponArt[0]+Element+WeaponArt[1]

func Add(String)
  ?EnchTypeList.Count() = 7
    EnchTypeList[6] = String
  :
    EnchTypeList.Add(String)

func ReturnEnchTypeList(Affix)
  ?Affix = "F"
    Add("6- Fire Debuff     ")
  :?Affix = "I"
    Add("6- Chill Duration  ")
  :?Affix = "P"
    Add("6- Poison Debuff   ")
  :?Affix = "L"
    Add("6- Lifesteal Chance")
  :?Affix = "U"
    Add("6- Unmaking Chance ")
  :?EnchTypeList.Count()=7
    EnchTypeList.RemoveAt(6)
  return EnchTypeList

/*
Enchantment numbers:
  0 = Dmg 
  1 = HP 
  2 = AS 
  3 = Splash
  4 = Elemental Dmg 
  5 = debuff
*/

func DisplayStats(Affix,ElePointer,Star,EnchantLevel,EnchTypePointer,f)
  var BasePointer = [Star,0,Star,Star,Star,Star,Star]
  BasePointer[EnchTypePointer] += EnchantLevel

  var AS_List = f.GetAS(Base_AS, AS_Reduction[BasePointer[2]])
  var AS = AS_List[0] + AS_List[1] + AS_List[2]

  var BonusInfo = ""
  ?string.Equals(Affix,"D")
    var Elemental = Pure_Elemental_Damage[BasePointer[4]]
  :
    var Elemental = Lesser_Elemental_Damage[BasePointer[4]]
    ?Affix = "F"
      BonusInfo += "Burns for "+ Fire[BasePointer[5]] +" damage\n"
    :?Affix = "P"
      BonusInfo += "Weakens attacks by "+ Weaken[BasePointer[5]] +" damage\n"
    :?Affix = "I"
      BonusInfo += "Chills target for "+ Chill[BasePointer[5]] +"s\n"
    :?Affix = "U"
      BonusInfo += Unmake[BasePointer[5]] +"% chance to unmake target\n"
    :?Affix = "L"
      BonusInfo += Lifesteal[BasePointer[5]] +"% chance to heal 1 hp\nAverage Heal per second: " + f.HealOnStrike(AS, Lifesteal[BasePointer[5]] ) + "\n"

  ?ElePointer = 5
    Elemental = 0

  var Dps = f.CalcDPS(Damage[BasePointer[0]], Elemental, AS, 0, 1, 1)

  var DPS_String = string.Format("
^Damage: {0} + {1}\n
^Attack Frames: {2}\n
^{3}
^\nDPS: {4}",
^Damage[BasePointer[0]], Elemental, AS, BonusInfo, Dps)

  return DPS_String