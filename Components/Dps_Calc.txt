/*\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
  Dps Calc
  Version: 1.0

  This is a script to calculate the dps of various weapons under different situations. It may be subject to error.

  The "WeaponStats" folder should be under Components. If you want to move it somewhere else you'll also need to 
  alter the imports in "ScriptFunctions".

  To run this on mobile (or PC if you want) you need to first "//" all your other imports 
  and then you can use the following script.

sys.SetFileUrl("https://raw.githubusercontent.com/Incoherent-Toast/TheToastFiles/main/")
//import Components/Dps_Calc

Run once and then remove the slashes in front of the import

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\*/




var f = import Components/WeaponStats/ScriptFunctions

var DropDownBox
var DropDownToggle = false
var DropDownButtonList = []
var SelectWeaponList = []
var AffixDropDown
var AffixDisplayToggle = false
var ColoursLong = ["[color=#00F0F0]","[color=#FFFF48]","[color=#32D032]","[color=#4040FF]","[color=#FF1616]","[color=#C000FF]"]
var ColoursShort = ["#00F0F0","#FFFF48","#32D032","#4040FF","#FF1616","#C000FF"]

var MotherPanel
var WeaponStats
var ChartParent
var ChartText
var LeftButton
var RightButton
var WeaponDropdown
var EleDisplay
var StarDisplay
var EnchantDisplay
var EnchTypeDisplay
var AACButton
var SwapButton
var BurstButton
var BerserkButton
var ChillButton
var Tab1
var Tab2
var Tab3
var WeaponArtBorder
var MoonButton
var LuckyCritButton
var LuckyMultButton
var LuckyText
var LuckyBox
var MotherPanel2
var InfoText
var InfoTextClipper
var HandCheck = 0

var Colour = "#FFFFFF"
var ScreenPos = 1
var WeaponArt

var Lines = ui.AddStyle("
^———
^###
^═══")

var SelectTab = ui.AddStyle("
^╔═╗
^║ ║
^╝ ╚")

var DeselectTab = ui.AddStyle("
^┌—┐
^│ │
^╧═╧")

var DropDownBorder = ui.AddStyle("
^###
^│ │
^╘═╛")

var Invis = ui.AddStyle("
^###
^###
^###")

func CreateUI(X,Y,W,H,UI)
  UI.x = X
  UI.y = Y
  UI.w = W
  UI.h = H
  UI.anchor = top_left
  UI.dock = top_left
  return UI

func Tab1Pressed()
  Tab1.style = SelectTab
  Tab2.style = DeselectTab
  Tab3.style = DeselectTab
  MotherPanel.visible = true
  MotherPanel2.visible = false

func Tab2Pressed()
  Tab1.style = DeselectTab
  Tab2.style = SelectTab
  Tab3.style = DeselectTab
  MotherPanel.visible = false
  MotherPanel2.visible = true

func Tab3Pressed()
  Tab1.style = DeselectTab
  Tab2.style = DeselectTab
  Tab3.style = SelectTab
  MotherPanel.visible = false
  MotherPanel2.visible = false

func Leave()
  loc.Leave()

func Inv()
  ui.OpenInv()

func Scroll_Right()
  ScreenPos = 1 - (32*3 - screen.w + 13)

func Scroll_Left()
  ScreenPos = 1

func ToggleBerserk()
  ?f.Berserk = 0
    f.Berserk = 15
    BerserkButton.text = "Berserk: ʘ"
  :
    f.Berserk = 0
    BerserkButton.text = "Berserk: ☺"
  ?EnchTypeOptionList.Count()
    WeaponDisplayStats()
    ChartText.text = f.GetChart()

func ToggleMoon()
  ?f.Moon = 0
    f.Moon = 5
    MoonButton.text = "Moondial: ʘ"
  :
    f.Moon = 0
    MoonButton.text = "Moondial: ☺"
  ?EnchTypeOptionList.Count()
    WeaponDisplayStats()
    ChartText.text = f.GetChart()

func UpdateLuckyText()
  var a = "☺"
  var b = "☺"
  ?f.LuckyCrit
    a = "ʘ"
  ?f.LuckyMult
    b = "ʘ"
  LuckyText.text = "Lucky:\n##Crit: "+a+"\n##Mult: "+b

func ToggleLuckyCrit()
  f.LuckyCrit = !f.LuckyCrit
  UpdateLuckyText()
  WeaponDisplayStats()

func ToggleLuckyMult()
  f.LuckyMult = !f.LuckyMult
  UpdateLuckyText()
  WeaponDisplayStats()

func ToggleChill()
  ?f.Chill = 0
    f.Chill = -20
    ChillButton.text = "Chill: ʘ"
  :
    f.Chill = 0
    ChillButton.text = "Chill: ☺"
  ?EnchTypeOptionList.Count()
    WeaponDisplayStats()
    ChartText.text = f.GetChart()

func UpdateWeap()
  CheckItemType(item.right, item.right.id)

func SetToggles()
  ?!f.WeaponSwap
    SwapButton.text = "Swap:  ☺"
  ?!f.AAC
    AACButton.text = "AAC:   ☺"
  ?!f.Burst
    BurstButton.text = "Burst: ☺"

func ToggleWeaponSwap()
  f.WeaponSwap = !f.WeaponSwap
  ?f.WeaponSwap
    SwapButton.text = "Swap:  ʘ"
    f.AAC = false
    f.Burst = false
    SetToggles()
  :
    SwapButton.text = "Swap:  ☺"
  WeaponDisplayStats()
  ChartText.text = f.GetChart()

func ToggleAAC()
  f.AAC = !f.AAC
  ?f.AAC
    AACButton.text = "AAC:   ʘ"
    f.Burst = false
    f.WeaponSwap = false
    SetToggles()
  :
    AACButton.text = "AAC:   ☺"
  WeaponDisplayStats()
  ChartText.text = f.GetChart()

func ToggleBurst()
  f.Burst = !f.Burst
  ?f.Burst
    BurstButton.text = "Burst: ʘ"
    f.AAC = false
    f.WeaponSwap = false
    SetToggles()
  :
    BurstButton.text = "Burst: ☺"
  WeaponDisplayStats()
  ChartText.text = f.GetChart()

var AffixDisplay
var AffixOptionList = []
var AfflixCombineList = []
var AffixPointer = 0
var StarOptionList = ["☆·0·☆","☆·1·☆","☆·2·☆","☆·3·☆","☆·4·☆","☆·5·☆","☆·6·☆","☆·7·☆","☆·8·☆","☆·9·☆","☆Max☆"]
var StarPointer = 0
var StarDisplayToggle = false
var StarDropDown
var EnchantDisplayToggle = false
var EnchantDropDown
var EleOptionList = ["∞", "♥", "*", "φ", "❄", "o"]
var ElePointer = 5
var EleDisplayToggle = false
var EleDropDown
var BigDebuff = "X"
var LittleDebuff = "x"
var EnchantLevel = 0

//Element Display Needed

var DisplayedOptions = [false, false, false]

var NumberButtons = []
var OkayButton
var PressCount
var TemporaryNumberCount

var EnchTypeDisplayToggle
var EnchTypeDropDown
var EnchTypeOptionList = []
var EnchTypePointer = 0

func GetAffix()
  ?AfflixCombineList[AffixPointer] = 1
    return AffixOptionList[AffixPointer]+BigDebuff
  ?AfflixCombineList[AffixPointer] = 2
    return AffixOptionList[AffixPointer]+LittleDebuff
  :
    return AffixOptionList[AffixPointer]

func WeaponDisplayStats()
  ?EnchTypeOptionList.Count() = 0
    return
  ?AffixOptionList.Count()
    WeaponStats.text = f.Weapon.DisplayStats(GetAffix(), ElePointer, StarPointer, EnchantLevel, EnchTypePointer, f)
  :
    WeaponStats.text = f.Weapon.DisplayStats("","",StarPointer,EnchantLevel,EnchTypePointer,f)

func SelectEnchType(btn)
  for a = 0..EnchTypeOptionList.Count()-1
    ?btn = DropDownButtonList[a]
      EnchTypeDisplay.text = EnchTypeOptionList[a]
      EnchTypePointer = a
      EnchTypeDisplayToggle = false
      EnchTypeDropDown.Recycle()
      WeaponDisplayStats()
      return

func EnchTypeDropMenu()
  ?f.Weapon = false
    >Select a weapon first!
    return
  ?EnchTypeDisplayToggle
    EnchTypeDisplayToggle = false
    EnchTypeDropDown.Recycle()
  :
    EnchTypeDisplayToggle = true
    EnchTypeDropDown = CreateUI(38,3, 21, 1, ui.AddPanel())
    EnchTypeDropDown.style = DropDownBorder
    MotherPanel.Add(EnchTypeDropDown)
    GenerateButtonList(EnchTypeOptionList,SelectEnchType,EnchTypeDropDown)

func UpdateEnchTypeOptions()
  ?AffixOptionList.Count() = 0
    EnchTypeOptionList = f.Weapon.ReturnEnchTypeList("gay")
    return
  :?AfflixCombineList[AffixPointer] = 1
    EnchTypeOptionList = f.Weapon.ReturnEnchTypeList(AffixOptionList[AffixPointer]+BigDebuff)
  :?AfflixCombineList[AffixPointer] = 2
    EnchTypeOptionList = f.Weapon.ReturnEnchTypeList(AffixOptionList[AffixPointer]+LittleDebuff)
  :
    EnchTypeOptionList = f.Weapon.ReturnEnchTypeList(AffixOptionList[AffixPointer])

func UpdateEnchTypeDisplay()
  UpdateEnchTypeOptions()
  EnchTypeDisplay.text = EnchTypeOptionList[EnchTypePointer%EnchTypeOptionList.Count()]

func SelectEle(btn)
  ?btn = DropDownButtonList[0]
    BigDebuff = "P"
    LittleDebuff = "p"
    ElePointer = 0
  :?btn = DropDownButtonList[1]
    BigDebuff = "L"
    LittleDebuff = "h"
    ElePointer = 1
  :?btn = DropDownButtonList[2]
    BigDebuff = "U"
    LittleDebuff = "u"
    ElePointer = 2
  :?btn = DropDownButtonList[3]
    BigDebuff = "F"
    LittleDebuff = "f"
    ElePointer = 3
  :?btn = DropDownButtonList[4]
    BigDebuff = "I"
    LittleDebuff = "i"
    ElePointer = 4
  :?btn = DropDownButtonList[5]
    BigDebuff = "X"
    LittleDebuff = "x"
    ElePointer = 5
  WeaponDisplayStats()
  UpdateAffixButton()
  UpdateEnchTypeDisplay()
  EleDisplay.text = EleOptionList[ElePointer]
  EleDisplayToggle = false
  WeaponArt = f.Weapon.ReturnWeaponArt( EleOptionList[ElePointer] )
  EleDropDown.Recycle()

func EleDropMenu()
  ?AffixOptionList.Count() = 0
    >No element options for selected weapon
    return
  ?EleDisplayToggle
    EleDisplayToggle = false
    EleDropDown.Recycle()
  :
    EleDisplayToggle = true
    EleDropDown = CreateUI(21,3, 3, 1, ui.AddPanel())
    EleDropDown.style = DropDownBorder
    MotherPanel.Add(EleDropDown)
    GenerateButtonList(EleOptionList,SelectEle,EleDropDown)

func EnterNumber(btn)
  for a = 0..NumberButtons.Count()-1
    ?btn = NumberButtons[a]
      ?PressCount
        TemporaryNumberCount += a
      :
        TemporaryNumberCount += a*10
        EnchantDisplay.text = "##" + a
  PressCount++
  ?PressCount = 2
    NumberConfirm()

func UpdateEnchantColor()
  ?EnchantLevel > 15
    Colour = "#rainFF"
  :?EnchantLevel > 10
    Colour = "#red"
  :?EnchantLevel > 6
    Colour = "#blue"
  :?EnchantLevel > 3
    Colour = "#green"
  :?EnchantLevel > 1
    Colour = "#yellow"
  :?EnchantLevel = 1
    Colour = "#cyan"
  :
    Colour = "#FFFFFF"

func NumberConfirm()
  ?PressCount = 1
    EnchantDisplay.text = "#+" + TemporaryNumberCount/10
    EnchantLevel = TemporaryNumberCount/10
  :?PressCount = 2
    var a = math.Min(TemporaryNumberCount,21)
    EnchantLevel = a
    EnchantDisplay.text = "#+" + a

  UpdateEnchantColor()
  WeaponDisplayStats()
  TemporaryNumberCount = 0
  EnchantDisplayToggle = false
  NumberButtons.Clear()
  EnchantDropDown.Recycle()

func CreateNumberButton(UI,x,y)
  UI.text = x+y*3+""
  UI.SetPressed(EnterNumber)
  EnchantDropDown.Add(UI)
  NumberButtons.Add(UI)


func EnchantDropMenu()
  ?EnchantDisplayToggle
    EnchantDisplayToggle = false
    NumberButtons.Clear()
    EnchantDropDown.Recycle()
    EnchantDisplay.text = "#+" + EnchantLevel
  :
    EnchantDisplayToggle = true
    PressCount = 0
    TemporaryNumberCount = 0
    EnchantDropDown = CreateUI(32,3, 11, 11, ui.AddPanel())
    EnchantDropDown.style = DropDownBorder
    for y = 0..2
      for x = 0..2
        CreateNumberButton(CreateUI(1+3*x,1+2*y, 3, 3, ui.AddButton()),x,y)
    CreateNumberButton(CreateUI(1,7, 3, 3, ui.AddButton()),0,3)
    OkayButton = CreateUI(4,7, 6, 3, ui.AddButton())
    OkayButton.text = "Okay"
    OkayButton.SetPressed(NumberConfirm)
    EnchantDropDown.Add(OkayButton)
    MotherPanel.Add(EnchantDropDown)

func SelectStar(btn)
  for a = 0..StarOptionList.Count()-1
    ?btn = DropDownButtonList[a]
      ?f.Weapon = f.Skeleton
        StarPointer = math.Max(a,5)
      :
        StarPointer = a
      StarDisplay.text = StarOptionList[StarPointer]
      StarDisplayToggle = false
      StarDropDown.Recycle()
      WeaponDisplayStats()
      return

func StarDropMenu()
  ?StarDisplayToggle
    StarDisplayToggle = false
    StarDropDown.Recycle()
  :
    StarDisplayToggle = true
    StarDropDown = CreateUI(27,3, 7, 1, ui.AddPanel())
    StarDropDown.style = DropDownBorder
    MotherPanel.Add(StarDropDown)
    GenerateButtonList(StarOptionList,SelectStar,StarDropDown)

func UpdateAffixButton()
  AffixPointer = AffixPointer % AffixOptionList.Count()
  AffixDisplay.text = GetAffix()

func SelectAffix(btn)
  for a = 0..AffixOptionList.Count()-1
    ?btn = DropDownButtonList[a]
      AffixDisplay.text = AffixOptionList[a]
      ?AfflixCombineList[a] = 1
        AffixDisplay.text += BigDebuff
      :?AfflixCombineList[a] = 2
        AffixDisplay.text += LittleDebuff
      AffixPointer = a
      AffixDisplayToggle = false
      AffixDropDown.Recycle()
      UpdateEnchTypeDisplay()
      WeaponDisplayStats()
      return

func AffixListGenerate()
  var Empty = []
  for a = 0..AffixOptionList.Count()-1
    ?AfflixCombineList[a] = 1
      Empty.Add( AffixOptionList[a] + BigDebuff )
    :?AfflixCombineList[a] = 2
      Empty.Add( AffixOptionList[a] + LittleDebuff )
    :
      Empty.Add(AffixOptionList[a])
  return Empty

func AffixDropMenu()
  ?AffixOptionList.Count() = 0
    >No affix options for selected weapon
    return
  ?AffixDisplayToggle
    AffixDisplayToggle = false
    AffixDropDown.Recycle()
  :
    AffixDisplayToggle = true
    AffixDropDown = CreateUI(24,3, 4, 1, ui.AddPanel())
    AffixDropDown.style = DropDownBorder
    MotherPanel.Add(AffixDropDown)
    GenerateButtonList(AffixListGenerate(),SelectAffix,AffixDropDown)

func WeaponDropMenu()
  ?DropDownToggle
    WeaponDropdown.text = "-Select Weapon-  ▼"
    RecycleWeapMenu()
  :
    WeaponDropdown.text = "-Select Weapon-  ▲"
    ?AffixDisplayToggle
      AffixDisplayToggle = false
      AffixDropDown.Recycle()
    CreateWeapMenu()
    GenerateButtonList(["Right Hand","Bardiche","Big Sword","Sword","- Crossbows - ▼","Staff","Wand","- Hammers - ▼","Skeleton Arm"],SelectWeapon,DropDownBox)

func RecycleWeapMenu()
  DropDownToggle = false
  DropDownBox.Recycle()

func RecycleOptions(RecycleEle, RecycleAffix, RecycleEnch)
  ?RecycleEle & DisplayedOptions[0]
    >hi
  ?RecycleAffix & DisplayedOptions[1]
    AffixtDisplay.Recycle()
  ?RecycleEnch & DisplayedOptions[2]
    >hi

func CreateWeapMenu()
    DropDownToggle = true
    DropDownBox = CreateUI(1,3, 20, 1, ui.AddPanel())
    DropDownBox.style = DropDownBorder
    MotherPanel.Add(DropDownBox)


var WeaponObjectList

/*
Example item strings & ids:  
  "Vigor Wand Vigor wand *10*max* +15 golden"
  "wand_lv2048_Vigor,element_damage_wand_2_Legendary15:2q1771"

  "Fire Shield Fire socketed_shield *10*max* +15 af"
  "socketed_shield_lv4096_Fire,element_armor_onenemy,dot_whenhit_Legendary15:4q1771"

  "Heavy Hammer Stone heavy_hammer *0* +3"
  "heavy_hammer_lv2_Rare3:3q7"

  "War Hammer Stone hammer *0* +0  Shiny"
  "hammer_lv2S"

  "Skeleton Arm Stone skeleton_arm *10*max* +21  lost"
  "skeleton_arm"

  "Chillrend Ice Sword Ice socketed_sword *10*max* +21 dI"
  "socketed_sword_lv4096_Ice,element_damage_sword,chill_onhit_Transcendant21:2q12049_Chillrend"

  "Frostmourne Ice Sword Ice socketed_sword *10*max* +21 D"
  "socketed_sword_lv4096_Ice,element_damage_sword_2_Transcendant21:2q12049_Frostmourne"
*/

func CheckItemString(itm)
  ?itm =  "socketed_"
    ?itm = "socketed_long_sword"
      f.Weapon = f.RuneLongSword
    :?itm = "socketed_crossbow"
      f.Weapon = f.RuneBow
    :?itm = "socketed_staff"
      f.Weapon = f.RuneStaff
      AffixOptionList = ["D","A","d","d","a","a"]
      AfflixCombineList = [0,0,1,2,1,2]
      return
    :?itm = "socketed_hammer"
      f.Weapon = f.RuneHammer
      AffixOptionList = ["D","d","a","ah"]
      AfflixCombineList = [0,1,1,0]
      return
    :
      f.Weapon = f.RuneSword
    AffixOptionList = ["D","d"]
    AfflixCombineList = [0,1]
    return
  :?itm = "bardiche"
    f.Weapon = f.Bardiche
  :?itm = "hammer *"
    ?itm = "heavy_hammer"
      f.Weapon = f.HeavyHammer
    :
      f.Weapon = f.WarHammer
  :?itm = "crossbow *"
    ?itm = "heavy_crossbow"
      f.Weapon = f.HeavyBow
    :
      f.Weapon = f.Crossbow
  :?itm = "wand *"
    f.Weapon = RuneWand
    AffixOptionList = ["D","d"]
    AfflixCombineList = [0,1]
    return
  :?itm = "skeleton_arm"
    f.Weapon = f.Skeleton

  AffixOptionList.Clear()
  AfflixCombineList.Clear()

func CheckEle(itm)
  //["∞", "♥", "*", "φ", "❄", "o"]
  ?itm = "Poison"
    return 0
  ?itm = "Vigor"
    return 1
  ?itm = "Aether"
    return 2
  ?itm = "Fire"
    return 3
  ?itm = "Ice"
    return 4
  return 5

func CheckRightWeapon()
  ?string.Equals(item.right,"")
    WeaponStats.text = "Selected weapon has no item.right string ☹"
    return
  var SplitList = string.Split(item.right,"*")
  StarPointer = int.Parse(SplitList[1])
  SplitList = string.Split( SplitList[SplitList.Count()-1] , "+", " ", true)
  EnchantLevel = int.Parse(SplitList[0])
  ElePointer = CheckEle(item.right)
  ?ElePointer < 5
    var Af = SplitList[1]
  :
    var Af = ""

  var ID_Split = string.Split(item.right.id,":",true)
  ?ID_Split.Count() = 1
    EnchTypePointer = 0
  :
    EnchTypePointer = int.Parse(string.Split(ID_Split[1],"q",true)[0])

  CheckItemString(item.right)


  EleDisplay.text = EleOptionList[ElePointer]
  WeaponArt = f.Weapon.ReturnWeaponArt( EleOptionList[ElePointer] )

  AffixDisplay.text = Af

  StarDisplay.text = StarOptionList[StarPointer]

  UpdateEnchantColor()
  EnchantDisplay.text = "#+" + EnchantLevel

  EnchTypeOptionList = f.Weapon.ReturnEnchTypeList(Af)
  EnchTypeDisplay.text = EnchTypeOptionList[EnchTypePointer%EnchTypeOptionList.Count()]

  ItemRight = item.right.id
  HandCheck = 2
  ChartText.text = f.GetChart()
  WeaponDropdown.text = "- Right Hand -"
  WeaponStats.text = f.Weapon.DisplayStats(Af, ElePointer, StarPointer, EnchantLevel, EnchTypePointer, f)

func SelectWeapon(btn)
  ?btn = DropDownButtonList[0]
    CheckRightWeapon()
    RecycleWeapMenu()
    return
  :?btn = DropDownButtonList[1]
    WeaponDropdown.text = "- Bardiche -"
    f.Weapon = f.Bardiche
    RecycleWeapMenu()
    AffixOptionList.Clear()
    AffixDisplay.text = ""
    EleDisplay.text = ""
  :?btn = DropDownButtonList[2]
    WeaponDropdown.text = "- Big Sword -"
    f.Weapon = f.RuneLongSword
    RecycleWeapMenu()
    AffixOptionList = ["D","d"]
    AfflixCombineList = [0,1]
    UpdateAffixButton()
    EleDisplay.text = EleOptionList[ElePointer]
  :?btn = DropDownButtonList[3]
    WeaponDropdown.text = "- Sword -"
    f.Weapon = f.RuneSword
    RecycleWeapMenu()
    AffixOptionList = ["D","d"]
    AfflixCombineList = [0,1]
    UpdateAffixButton()
    EleDisplay.text = EleOptionList[ElePointer]
  :?btn = DropDownButtonList[4]
    WeaponDropdown.text = "- Select Crossbow-"
    SelectWeaponList = ["Rune Crossbow","Heavy Crossbow","Repeater","Crossbow"]
    WeaponObjectList = [f.RuneBow,f.HeavyBow,f.Repeater,f.Crossbow]
    RecycleWeapMenu()
    CreateWeapMenu()
    GenerateButtonList(SelectWeaponList,SelectWeapon2,DropDownBox)
    return
  :?btn = DropDownButtonList[5]
    WeaponDropdown.text = "- Staff -"
    f.Weapon = f.RuneStaff
    RecycleWeapMenu()
    AffixOptionList = ["D","A","d","d","a","a"]
    AfflixCombineList = [0,0,1,2,1,2]
    UpdateAffixButton()
    EleDisplay.text = EleOptionList[ElePointer]
  :?btn = DropDownButtonList[6]
    WeaponDropdown.text = "- Wand -"
    f.Weapon = f.RuneWand
    RecycleWeapMenu()
    AffixOptionList = ["D","d"]
    AfflixCombineList = [0,1]
    UpdateAffixButton()
    EleDisplay.text = EleOptionList[ElePointer]
  :?btn = DropDownButtonList[7]
    WeaponDropdown.text = "- Select Hammer -"
    SelectWeaponList = ["Rune Hammer","Heavy Hammer","War Hammer"]
    WeaponObjectList = [f.RuneHammer,f.HeavyHammer,f.WarHammer]
    RecycleWeapMenu()
    CreateWeapMenu()
    GenerateButtonList(SelectWeaponList,SelectWeapon2,DropDownBox)
    return
  :?btn = DropDownButtonList[8]
    WeaponDropdown.text = "- Skeleton Arm -"
    f.Weapon = f.Skeleton
    RecycleWeapMenu()
    StarPointer = math.Max(StarPointer,5)
    StarDisplay.text = StarOptionList[StarPointer]
    AffixOptionList.Clear()
    AffixDisplay.text = ""
    EleDisplay.text = ""

  HandCheck = 0
  UpdateEnchTypeDisplay()
  WeaponDisplayStats()
  WeaponArt = f.Weapon.ReturnWeaponArt( EleOptionList[ElePointer] )
  ChartText.text = f.GetChart()

func SelectWeapon2(btn)
  for a = 0..SelectWeaponList.Count()-1
    ?btn = DropDownButtonList[a]
      RecycleWeapMenu()
      ?a > 0
        AffixOptionList.Clear()
        AffixDisplay.text = ""
        EleDisplay.text = ""
      :?WeaponDropdown.text = "- Select Hammer -"
        AffixOptionList = ["D","d","a","ah"]
        AfflixCombineList = [0,1,1,0]
        UpdateAffixButton()
        EleDisplay.text = EleOptionList[ElePointer]
      :
        AffixOptionList = ["D","d"]
        AfflixCombineList = [0,1]
        UpdateAffixButton()
        EleDisplay.text = EleOptionList[ElePointer]
      HandCheck = 0
      WeaponDropdown.text = "- "+SelectWeaponList[a]+" -"
      f.Weapon = WeaponObjectList[a]
      UpdateEnchTypeDisplay()
      WeaponArt = f.Weapon.ReturnWeaponArt( EleOptionList[ElePointer] )
      ChartText.text = f.GetChart()
      WeaponDisplayStats()
      return

func GenerateButtonList(List,PressFunc,Parent)
  DropDownButtonList.Clear()
  Parent.h = List.Count()+2
  for a = 0..List.Count()-1
    var b = CreateUI(1,1+a, Parent.w-2, 1, ui.AddButton())
    b.SetPressed(PressFunc)
    b.text = List[a]
    b.style = Invis
    Parent.Add(b)
    DropDownButtonList.Add(b)

var InvButton
var LeaveButton

?loc.begin
  disable pause
  MotherPanel = CreateUI(2,3, screen.w-4, screen.h-4, ui.AddPanel())
  MotherPanel.clip = true
  MotherPanel.style = 3

  MotherPanel2 = CreateUI(2,3, screen.w-4, screen.h-4, ui.AddPanel())
  MotherPanel2.style = 3
  MotherPanel2.visible = false

  InfoTextClipper = CreateUI(1,1, screen.w-6, screen.h-6, ui.AddPanel())
  InfoTextClipper.clip = true
  InfoTextClipper.style = Invis
  InfoText = CreateUI(0,0, screen.w-6, 0, ui.AddText(f.Informationisms))
  InfoText.align = center

  InfoTextClipper.Add(InfoText)
  MotherPanel2.Add(InfoTextClipper)

  WeaponStats = CreateUI(21,6, screen.w-6, 3, ui.AddText("Select a weapon to display stats"))
  WeaponStats.align = left

  WeaponArtBorder = CreateUI(2,4, 10, 6, ui.AddPanel())

  ChartParent = CreateUI(1,screen.h-12, screen.w-6, 8, ui.AddPanel())
  ChartParent.style = Lines
  ChartParent.clip = true

  ChartText = CreateUI(1,1, 999 , 3, ui.AddText())
  ChartText.align = left
  ChartParent.Add(ChartText)

  LeftButton = CreateUI(1,screen.h-14, 5 , 3, ui.AddButton())
  LeftButton.text = "<--"
  LeftButton.SetPressed(Scroll_Left)
  RightButton = CreateUI(screen.w-10,screen.h-14, 5 , 3, ui.AddButton())
  RightButton.text = "-->"
  RightButton.SetPressed(Scroll_Right)

  WeaponDropdown = CreateUI(1,1, 20 , 3, ui.AddButton())
  WeaponDropdown.text = "-Select Weapon-  ▼"
  WeaponDropdown.SetPressed(WeaponDropMenu)

  EleDisplay = CreateUI(21,1, 3, 3, ui.AddButton())
  EleDisplay.text = ""
  EleDisplay.SetPressed(EleDropMenu)
  AffixDisplay = CreateUI(24,1, 4, 3, ui.AddButton())
  AffixDisplay.text = ""
  AffixDisplay.SetPressed(AffixDropMenu)
  StarDisplay = CreateUI(28,1, 5, 3, ui.AddButton())
  StarDisplay.text = ""
  StarDisplay.SetPressed(StarDropMenu)
  EnchantDisplay = CreateUI(33,1, 5, 3, ui.AddButton())
  EnchantDisplay.text = ""
  EnchantDisplay.SetPressed(EnchantDropMenu)
  EnchTypeDisplay = CreateUI(38,1, 21, 3, ui.AddButton())
  EnchTypeDisplay.text = ""
  EnchTypeDisplay.SetPressed(EnchTypeDropMenu)

  AACButton = CreateUI(screen.w-23,8, 8 , 1, ui.AddButton())
  AACButton.text = "AAC:   ☺"
  AACButton.SetPressed(ToggleAAC)
  SwapButton = CreateUI(screen.w-23,9, 8 , 1, ui.AddButton())
  SwapButton.text = "Swap:  ☺"
  SwapButton.SetPressed(ToggleWeaponSwap)
  BurstButton = CreateUI(screen.w-23,10, 8 , 1, ui.AddButton())
  BurstButton.text = "Burst: ☺"
  BurstButton.SetPressed(ToggleBurst)

  BerserkButton = CreateUI(screen.w-29,0, 12 , 3, ui.AddButton())
  BerserkButton.text = "Berserk: ☺"
  BerserkButton.SetPressed(ToggleBerserk)

  ChillButton = CreateUI(screen.w-17,0, 10 , 3, ui.AddButton())
  ChillButton.text = "Chill: ☺"
  ChillButton.SetPressed(ToggleChill)

  LuckyBox  =  CreateUI(screen.w-29,3, 12 , 4, ui.AddPanel())
  LuckyBox.color = #808080
  LuckyText  = CreateUI(screen.w-29,3, 12 , 3, ui.AddText("Lucky:\n##Crit: ☺\n##Mult: ☺"))
  LuckyText.align = left

  LuckyMultButton = CreateUI(screen.w-29,5, 12 , 2, ui.AddButton())
  LuckyMultButton.text = ""
  LuckyMultButton.style = Invis
  LuckyMultButton.SetPressed(ToggleLuckyMult)

  LuckyCritButton = CreateUI(screen.w-29,3, 12 , 2, ui.AddButton())
  LuckyCritButton.text = ""
  LuckyCritButton.style = Invis
  LuckyCritButton.SetPressed(ToggleLuckyCrit)

  MoonButton = CreateUI(screen.w-17,3, 13 , 3, ui.AddButton())
  MoonButton.text = "Moondial: ☺"
  MoonButton.SetPressed(ToggleMoon)

  Tab1 = CreateUI(4,1, 15 , 3, ui.AddButton())
  Tab1.style = SelectTab
  Tab1.bcolor = #FFFFFF
  Tab1.text = "Random Tab 1"
  Tab1.SetPressed(Tab1Pressed)

  Tab2 = CreateUI(19,1, 15 , 3, ui.AddButton())
  Tab2.style = DeselectTab
  Tab2.bcolor = #FFFFFF
  Tab2.text = "Random Tab 2"
  Tab2.SetPressed(Tab2Pressed)

  Tab3 = CreateUI(34,1, 15 , 3, ui.AddButton())
  Tab3.style = DeselectTab
  Tab3.bcolor = #FFFFFF
  Tab3.text = "Random Tab 3"
  Tab3.SetPressed(Tab3Pressed)

  InvButton = CreateUI(49,1, 15 , 3, ui.AddButton())
  InvButton.style = 1
  InvButton.bcolor = #FFFFFF
  InvButton.text = "Inventory"
  InvButton.SetPressed(Inv)

  InvButton = CreateUI(screen.w-5,0, 5 , 3, ui.AddButton())
  InvButton.style = 1
  InvButton.bcolor = #FFFFFF
  InvButton.text = "X"
  InvButton.SetPressed(Leave)

  MotherPanel.Add(WeaponArtBorder)
  MotherPanel.Add(WeaponDropdown)
  MotherPanel.Add(EleDisplay)
  MotherPanel.Add(AffixDisplay)
  MotherPanel.Add(StarDisplay)
  MotherPanel.Add(EnchantDisplay)
  MotherPanel.Add(EnchTypeDisplay)
  MotherPanel.Add(AACButton)
  MotherPanel.Add(SwapButton)
  MotherPanel.Add(BurstButton)
  MotherPanel.Add(WeaponStats)
  MotherPanel.Add(BerserkButton)
  MotherPanel.Add(ChillButton)
  MotherPanel.Add(LuckyBox)
  MotherPanel.Add(LuckyText)
  MotherPanel.Add(LuckyMultButton)
  MotherPanel.Add(LuckyCritButton)
  MotherPanel.Add(MoonButton)
  MotherPanel.Add(ChartParent)
  MotherPanel.Add(LeftButton)
  MotherPanel.Add(RightButton)

var ItemLeft //= item.left.id
var ItemRight //= item.right.id

func RunPage()
  ?ChartText.x > ScreenPos
    ChartText.x --
  :?ChartText.x < ScreenPos
    ChartText.x++

  ?HandCheck = 2
    ?ItemRight ! item.right.id
      CheckRightWeapon()
  :?HandCheck = 1
    ?ItemLeft ! item.left.id
      ItemLeft = item.left.id

RunPage()

?WeaponArt & !DropDownToggle & MotherPanel.visible
  >`6,7,@Colour@,@WeaponArt@













